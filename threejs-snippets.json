{
/***************************************************************************
   *
   * THREE.js Snippets
   *
   ****************************************************************************/

/**
   *
   *  Constants - Animation
   */
"Animation Action": {
"prefix": "AnimationAction",
"body": "AnimationAction(${1:mixer}, ${2:clip}, ${3:localRoot});$0",
"description" : "Schedule the performance of the animations in AnimationClips"},
"Animation Clip" : {
 "prefix" : "THREE.AnimationClip",
 "body" : "THREE.AnimationClip( ${1:name}, ${2:duration}, ${3:tracks});$0",
 "description" : "A reusable set of keyframe tracks which represent an animation."
},
"Animation Mixer" : {
 "prefix" : "THREE.AnimationMixer",
 "body" : "THREE.AnimationMixer(${1:rootObject});$0",
 "description" : "A player for animations on a particular object in the scene."
},
"Animation Object Group" : {
 "prefix" : "THREE.AnimationObjectGroup",
 "body" : "THREE.AnimationObjectGroup( ${1:object1}, ${2:object2}, ${3:object3}, ...);$0",
 "description" : "A group of objects that receives a shared animation state."
},
"Property Binding" : {
 "prefix" : "PropertyBinding",
 "body" : "PropertyBinding( ${1:rootNode}, ${2:path}, ${3:parsedPath});$0",
 "description" : "Holds a reference to a real property in the scene graph; used internally."
},
"Property Mixer" : {
 "prefix" : "PropertyMixer",
 "body" : "PropertyMixer(${1:binding}. ${2:typeName}, ${3:valueSize});$0",
 "description" : "Buffered scene graph property that allows weighted accumulation; used internally."
},
/**
   *
   *  Animation Utilities
   *
   */
"Array Slice" : {
 "prefix" : "AnimationUtils.arraySlice",
 "body" : "AnimationUtils.arraySlice( ${1:array}, ${2:from}, ${3:to});$0",
 "description" : "Slice that works on typed arrays."
},
"Convert Array" : {
 "prefix" : "AnimationUtils.convertArray",
 "body" : "AnimationUtils.convertArray(${1:array}, ${2:type}, ${3:forceClone});$0",
 "description" : "Converts the type of an array to a specific type."
},
"Flatten JSON" : {
 "prefix" : "AnimationUtils.flattenJSON",
 "body" : "AnimationUtils.flattenJSON(${1:jsonKeys}, ${2:times}, ${3:values}, ${4:valuePropertyName});$0",
 "description" : "Used for parsing AOS keyframe formats"
},
"Get Keyframe Order" : {
 "prefix" : "AnimationUtils.getKeyframeOrder",
 "body" : "AnimationUtils.getKeyframeOrder(${1:times});$0",
 "description" : "Returns an array by which times and values can be sorted."
},
"Is Typed Array" : {
 "prefix" : "AnimationUtils.isTypedArray",
 "body" : "AnimationUtils.isTypedArray(${1:object});$0",
 "description" : "Returns true if object is a typed array."
},
"Sorted Array" : {
 "prefix" : "AnimationUtils.sortedArray",
 "body" : "AnimationUtils.sortedArray(${1:values}, ${2:stride}, ${3:order});$0",
 "description" : "Sorts the array previously returned by getKeyframeOrder"
},
  /**
   *
   *  Constants - Core
   *
   *
   */

   
  /**
   *
   * Constants - Custom Blending Equations
   */
   
  "Add Equation": {
    "prefix": "THREE.AddEquation",
    "body": "THREE.AddEquation();$0",
    "description": "Add an equation"
  },
  "Subtract Equation": {
    "prefix": "THREE.SubtractEquation",
    "body": "THREE.SubtractEquation();$0",
    "description": "Subtract an equation"
  },
  "Reverse Subtract Equation": {
    "prefix": "THREE.ReverseSubtractEquation",
    "body": "THREE.ReverseSubtractEquation();$0",
    "description": "Reverse subtract an equation"
  },
  "Min Equation": {
    "prefix": "THREE.MinEquation",
    "body": "THREE.MinEquation();$0",
    "description": "Minimum Equation"
  },
  "MaxEquation": {
    "prefix": "THREE.MaxEquation",
    "body": "THREE.MaxEquation();$0",
    "description": "Max Equation"
  },
  /**
   *
   * Source Factors
   */
  "Zero Factor": {
    "prefix": "THREE.ZeroFactor",
    "body": "THREE.ZeroFactor();$0",
    "description": "Zero Factor"
  },
  "One Factor": {
    "prefix": "THREE.OneFactor",
    "body": "THREE.OneFactor();$0",
    "description": "One Factor"
  },
  "Source Color Factor": {
    "prefix": "THREE.SrcColorFactor",
    "body": "THREE.SrcColorFactor();$0",
    "description": "SrcColorFactor"
  },
  "One Minus Source Color Factor": {
    "prefix": "THREE.OneMinusSrcColorFactor",
    "body": "THREE.OneMinusSrcColorFactor();$0",
    "description": "One Minus Source Color Factor"
  },
  /**
   *
   * Destination Factor
   */
  /**
   *
   *  Constants - DrawModes
   */
  /**
  /**
   *
   *  Constants - Material Constants
   */
   /**
   *
   *  Constants - Renderer Constants
   */
  /**
  *
  * Constants - Texture Constants
  *
  **/
  /**
   /**
   *
   * Cameras
   */
  "THREE.PerspectiveCamera": {
    "prefix": "THREE.PerspectiveCamera",
    "body": "THREE.PerspectiveCamera(${1:fov}, ${2:aspect}, ${3:near}, ${4:far} );$0",
    "description": "Perspective Camera"
  },
  "THREE.OrthographicCamera": {
    "prefix": "THREE.OrthographicCamera",
    "body": "THREE.OrthographicCamera( ${1:left}, ${2:right}, ${3:top}, ${4:bottom}, ${5:near}, ${6:far} );$0",
    "description": "Camerah"
  },
  /**
  *
  * Core 
  *
  **/
  "THREE.Clock": {
    "prefix": "THREE.Clock",
    "body": "THREE.Clock( ${1:autoStart} );$0"
  },
  /**
  *
  * Math
  *
  **/
  "THREE.Color": {
    "prefix": "THREE.Color",
    "body": "THREE.Color( ${1:hex} );$0"
  },
  "THREE.Face3": {
    "prefix": "THREE.Face3",
    "body": "THREE.Face3( ${1:a}, ${2:b}, ${3:c}, ${4:normal}, ${5:color}, ${6:materialIndex} );$0"
  },
  "THREE.Face4": {
    "prefix": "THREE.Face4",
    "body": "THREE.Face4( ${1:a}, ${2:b}, ${3:c}, ${4:normal}, ${5:color}, ${6:materialIndex} );$0"
  },
  "THREE.Frustrum": {
    "prefix": "THREE.Frustrum",
    "body": "THREE.Frustrum();$0"
  },
  "THREE.Geometry": {
    "prefix": "THREE.Geometry",
    "body": "THREE.Geometry();$0"
  },
  "THREE.Math": {
    "prefix": "THREE.Math",
    "body": "THREE.Math();$0"
  },
  "THREE.Matrix3": {
    "prefix": "THREE.Matrix3",
    "body": "THREE.Matrix3();$0"
  },
  "THREE.Matrix4": {
    "prefix": "THREE.Matrix4",
    "body": "THREE.Matrix4( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );$0"
  },
  "THREE.Object3D": {
    "prefix": "THREE.Object3D",
    "body": "THREE.Object3D();$0"
  },
  "THREE.Raycaster": {
    "prefix": "THREE.Raycaster",
    "body": "THREE.Raycaster( ${1:origin}, ${2:direction}, ${3:near}, ${4:far});$0"
  },
  "THREE.Quaternion": {
    "prefix": "THREE.Quaternion",
    "body": "THREE.Quaternion(${1:x}, ${2:y}, ${3:z}, ${4:w});$0"
  },
  "THREE.Ray": {
    "prefix": "THREE.Ray",
    "body": "THREE.Ray(${1:origin}, ${2:direction});$0"
  },
  "THREE.RectAreaLight": {
    "prefix": "THREE.RectAreaLight",
    "body": "THREE.RectAreaLight(${1:color}, ${2:intensity}, ${3:width}, ${4:height});$0"
  },
  // "THREE.UV": {
  //   "prefix": "THREE.UV",
  //   "body": "THREE.UV( u, v );$0"
  // },
  "THREE.Vector2": {
    "prefix": "THREE.Vector2",
    "body": "THREE.Vector2( ${1:x}, ${2:y} );$0"
  },
  "THREE.Vector3": {
    "prefix": "THREE.Vector3",
    "body": "THREE.Vector3( ${1:x}, ${2:y}, ${3:z} );$0"
  },
  "THREE.Vector4": {
    "prefix": "THREE.Vector4",
    "body": "THREE.Vector4( ${1:x}, ${2:y}, ${3:z}, ${4:w} );$0"
  },
  "THREE.Light": {
    "prefix": "THREE.Light",
    "body": "THREE.Light( ${1:color}, ${2:intensity} );$0"
  },
  "THREE.AmbientLight": {
    "prefix": "THREE.AmbientLight",
    "body": "THREE.AmbientLight( ${1:hex}, ${2:intensity} );$0"
  },
  "THREE.DirectionalLight": {
    "prefix": "THREE.DirectionalLight",
    "body": "THREE.DirectionalLight( ${1:hex}, ${2:intensity} );$0"
  },
  "THREE.PointLight": {
    "prefix": "THREE.PointLight",
    "body": "THREE.PointLight( ${1:color}, ${2:intensity}, ${3:distance} );$0"
  },
  "THREE.SpotLight": {
    "prefix": "THREE.SpotLight",
    "body": "THREE.SpotLight( ${1:color}, ${2:intensity}, ${3:distance}, ${4:angle}, ${5:penumbra}, ${6:decay});$0"
  },
  "THREE.Loader": {
    "prefix": "THREE.Loader",
    "body": "THREE.Loader();$0"
  },
  "THREE.BinaryLoader": {
    "prefix": "THREE.BinaryLoader",
    "body": "THREE.BinaryLoader();$0"
  },
  "THREE.JSONLoader": {
    "prefix": "THREE.JSONLoader",
    "body": "THREE.JSONLoader();$0"
  },
  "THREE.SceneLoader": {
    "prefix": "THREE.SceneLoader",
    "body": "THREE.SceneLoader();$0"
  },
  /**
  *
  * Materials
  *
  **/
  "THREE.Material": {
    "prefix": "THREE.Material",
    "body": "THREE.Material( ${1:id}, ${2:name}, ${3:opacity}, ${4:transparent}, ${5:blending} );$0"
  },
  "THREE.LineBasicMaterial": {
    "prefix": "THREE.LineBasicMaterial",
    "body": "THREE.LineBasicMaterial( ${1:color}, ${2:linewidth}, ${3:linecap}, ${4:linejoin}, ${5:vertexColors} );$0"
  },
  "THREE.MeshBasicMaterial": {
    "prefix": "THREE.MeshBasicMaterial",
    "body": "THREE.MeshBasicMaterial( ${1:color}, ${2:map}, ${3:shading}, ${4:wireframe} );$0"
  },
  "THREE.MeshDepthMaterial": {
    "prefix": "THREE.MeshDepthMaterial",
    "body": "THREE.MeshDepthMaterial( ${1:morphTargets}, ${2:wireframe}, ${3:wireframeLinewidth} );$0"
  },
  "THREE.MeshFaceMaterial": {
    "prefix": "THREE.MeshFaceMaterial",
    "body": "THREE.MeshFaceMaterial( ${1:materials} );$0"
  },
  "THREE.MeshLambertMaterial": {
    "prefix": "THREE.MeshLambertMaterial",
    "body": "THREE.MeshLambertMaterial( ${1:color}, ${2:map}, ${3:shading}, ${4:wireframe} );$0"
  },
  "THREE.MeshNormalMaterial": {
    "prefix": "THREE.MeshNormalMaterial",
    "body": "THREE.MeshNormalMaterial( ${1:wireframe}, ${2:wireframeLinewidth}, ${3:morphTargets} );$0"
  },
  "THREE.MeshPhongMaterial": {
    "prefix": "THREE.MeshPhongMaterial",
    "body": "THREE.MeshPhongMaterial( ${1:color}, ${2:map}, ${3:shading}, ${4:wireframe} );$0"
  },
  "THREE.PointCloudMaterial": {
    "prefix": "THREE.PointCloudMaterial",
    "body": "THREE.PointCloudMaterial( ${1:color}, ${2:map}, ${3:size}, ${4:vertexColors} );$0"
  },
  "THREE.ParticleBasicMaterial": {
    "prefix": "THREE.ParticleBasicMaterial",
    "body": "THREE.ParticleBasicMaterial( ${1:parameters} );$0"
  },
  "THREE.ParticleCanvasMaterial": {
    "prefix": "THREE.ParticleCanvasMaterial",
    "body": "THREE.ParticleCanvasMaterial( ${1:parameters} );$0"
  },
  "THREE.ParticleDOMMaterial": {
    "prefix": "THREE.ParticleDOMMaterial",
    "body": "THREE.ParticleDOMMaterial( ${1:parameters} );$0"
  },
  "THREE.ShaderMaterial": {
    "prefix": "THREE.ShaderMaterial",
    "body": "THREE.ShaderMaterial( ${1:uniforms}, ${2:attributes}, ${3:defines}, ${4:vertexShader} );$0"
  },
  "THREE.RawShaderMaterial": {
    "prefix": "THREE.RawShaderMaterial",
    "body": "THREE.RawShaderMaterial( ${1:parameters} );$0"
  },
  /**
  *
  * Objects
  *
  **/
  "THREE.Bone": {
    "prefix": "THREE.Bone",
    "body": "THREE.Bone( belongsToSkin );$0"
  },
  "THREE.Line": {
    "prefix": "THREE.Line",
    "body": "THREE.Line( geometry, material, type );$0"
  },
  "THREE.LOD": {
    "prefix": "THREE.LOD",
    "body": "THREE.LOD( ${1:objects});$0"
  },
  "THREE.Mesh": {
    "prefix": "THREE.Mesh",
    "body": "THREE.Mesh( ${1:geometry}, ${2:material});$0"
  },
  "THREE.MorphAnimMesh": {
    "prefix": "THREE.MorphAnimMesh",
    "body": "THREE.MorphAnimMesh( ${1:geometry}, ${2:material});$0;$0"
  },
  "THREE.Particle": {
    "prefix": "THREE.Particle",
    "body": "THREE.Particle( ${1:material} );$0"
  },
  "THREE.ParticleSystem": {
    "prefix": "THREE.ParticleSystem",
    "body": "THREE.ParticleSystem( ${1:geometry}, ${2:material});$0"
  },
  "THREE.Ribbon": {
    "prefix": "THREE.Ribbon",
    "body": "THREE.Ribbon( ${1:geometry}, ${2:material});$0"
  },
  "THREE.SkinnedMesh": {
    "prefix": "THREE.SkinnedMesh",
    "body": "THREE.SkinnedMesh( ${1:geometry}, ${2:material});$0"
  },
  "THREE.Sprite": {
    "prefix": "THREE.Sprite",
    "body": "THREE.Sprite( ${1:parameters} );$0"
  },
  /**
  *
  * Renderers
  *
  **/
  "THREE.CanvasRenderer": {
    "prefix": "THREE.CanvasRenderer",
    "body": "THREE.CanvasRenderer( ${1:parameters} );$0"
  },
  "THREE.DOMRenderer": {
    "prefix": "THREE.DOMRenderer",
    "body": "THREE.DOMRenderer();$0"
  },
  "THREE.SVGRenderer": {
    "prefix": "THREE.SVGRenderer",
    "body": "THREE.SVGRenderer();$0"
  },
  "THREE.WebGLRenderer": {
    "prefix": "THREE.WebGLRenderer",
    "body": "THREE.WebGLRenderer( ${1:parameters} );$0"
  },
  "THREE.WebGLRenderTarget": {
    "prefix": "THREE.WebGLRenderTarget",
    "body": "THREE.WebGLRenderTarget( width, height, options );$0"
  },
  "THREE.WebGLRenderTargetCube": {
    "prefix": "THREE.WebGLRenderTargetCube",
    "body": "THREE.WebGLRenderTargetCube( width, height, options );$0"
  },
  /**
  *
  * Shaders
  *
  **/
  "THREE.ShaderChunk": {
    "prefix": "THREE.ShaderChunk",
    "body": "THREE.ShaderChunk;$0"
  },
  "THREE.ShaderLib": {
    "prefix": "THREE.ShaderLib",
    "body": "THREE.ShaderLib;$0"
  },
  "THREE.RenderableFace3": {
    "prefix": "THREE.RenderableFace3",
    "body": "THREE.RenderableFace3();$0"
  },
  "THREE.RenderableFace4": {
    "prefix": "THREE.RenderableFace4",
    "body": "THREE.RenderableFace4();$0"
  },
  "THREE.RenderableLine": {
    "prefix": "THREE.RenderableLine",
    "body": "THREE.RenderableLine();$0"
  },
  "THREE.RenderableObject": {
    "prefix": "THREE.RenderableObject",
    "body": "THREE.RenderableObject();$0"
  },
  "THREE.RenderableParticle": {
    "prefix": "THREE.RenderableParticle",
    "body": "THREE.RenderableParticle();$0"
  },
  "THREE.RenderableVertex": {
    "prefix": "THREE.RenderableVertex",
    "body": "THREE.RenderableVertex();$0"
  },
  /**
  *
  * Scenes
  *
  **/
  "THREE.Fog": {
    "prefix": "THREE.Fog",
    "body": "THREE.Fog( hex, near, far );$0"
  },
  "THREE.FogExp2": {
    "prefix": "THREE.FogExp2",
    "body": "THREE.FogExp2( hex, density );$0"
  },
  "THREE.Scene": {
    "prefix": "THREE.Scene",
    "body": "THREE.Scene();$0"
  },
  /**
  *
  * Textures
  *
  **/
  "THREE.DataTexture": {
    "prefix": "THREE.DataTexture",
    "body": "THREE.DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter );$0"
  },
  "THREE.Texture": {
    "prefix": "THREE.Texture",
    "body": "THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type );$0"
  },
  "THREE.ColorUtils": {
    "prefix": "THREE.ColorUtils",
    "body": "THREE.ColorUtils$0"
  },
  "THREE.GeometryUtils": {
    "prefix": "THREE.GeometryUtils",
    "body": "THREE.GeometryUtils$0"
  },
  "THREE.ImageUtils": {
    "prefix": "THREE.ImageUtils",
    "body": "THREE.ImageUtils$0"
  },
  "THREE.SceneUtils": {
    "prefix": "THREE.SceneUtils",
    "body": "THREE.SceneUtils$0"
  },
  "THREE.ShaderUtils": {
    "prefix": "THREE.ShaderUtils",
    "body": "THREE.ShaderUtils$0"
  },
  /**
   *
   * Animation
   */
  "THREE.Animation": {
    "prefix": "THREE.Animation",
    "body": "THREE.Animation( root, data, interpolationType, JITCompile );$0"
  },
  "THREE.AnimationHandler": {
    "prefix": "THREE.AnimationHandler",
    "body": "THREE.AnimationHandler();$0"
  },
  "THREE.AnimationMorphTarget": {
    "prefix": "THREE.AnimationMorphTarget",
    "body": "THREE.AnimationMorphTarget( root, data );$0"
  },
  "THREE.KeyFrameAnimation": {
    "prefix": "THREE.KeyFrameAnimation",
    "body": "THREE.KeyFrameAnimation( root, data, JITCompile );$0"
  },
  "THREE.CombinedCamera": {
    "prefix": "THREE.CombinedCamera",
    "body": "THREE.CombinedCamera( width, height, fov, near, far, orthonear, orthofar );$0"
  },
  "THREE.CubeCamera": {
    "prefix": "THREE.CubeCamera",
    "body": "THREE.CubeCamera( near, far, cubeResolution );$0"
  },
  /**
  *
  * Controls
  *
  **/
  "THREE.FirstPersonControls": {
    "prefix": "THREE.FirstPersonControls",
    "body": "THREE.FirstPersonControls( object, domElement );$0"
  },
  "THREE.FlyControls": {
    "prefix": "THREE.FlyControls",
    "body": "THREE.FlyControls( object, domElement );$0"
  },
  "THREE.PathControls": {
    "prefix": "THREE.PathControls",
    "body": "THREE.PathControls( object, domElement );$0"
  },
  "THREE.RollControls": {
    "prefix": "THREE.RollControls",
    "body": "THREE.RollControls( object, domElement );$0"
  },
  "THREE.TrackballControls": {
    "prefix": "THREE.TrackballControls",
    "body": "THREE.TrackballControls( object, domElement );$0"
  },
  "THREE.BufferGeometry": {
    "prefix": "THREE.BufferGeometry",
    "body": "THREE.BufferGeometry();$0"
  },
  /**
  *
  * Curves
  *
  **/
  "THREE.Curve": {
    "prefix": "THREE.Curve",
    "body": "THREE.Curve();$0"
  },
  "THREE.CurvePath": {
    "prefix": "THREE.CurvePath",
    "body": "THREE.CurvePath();$0"
  },
  "THREE.SplineCurve": {
    "prefix": "THREE.SplineCurve",
    "body": "THREE.SplineCurve([new THREE.Vector2(${1:points_x},${2:points_y}), new THREE.Vector2(${3:points_x}, $4{points_y}));$0"
  },
  "THREE.EventTarget": {
    "prefix": "THREE.EventTarget",
    "body": "THREE.EventTarget();$0"
  },
  "THREE.Gyroscope": {
    "prefix": "THREE.Gyroscope",
    "body": "THREE.Gyroscope();$0"
  },
  "THREE.Path": {
    "prefix": "THREE.Path",
    "body": "THREE.Path( points );$0"
  },
  "THREE.Shape": {
    "prefix": "THREE.Shape",
    "body": "THREE.Shape();$0"
  },
  "THREE.TextPath": {
    "prefix": "THREE.TextPath",
    "body": "THREE.TextPath( text, parameters );$0"
  },
  /**
  *
  * Geometries
  *
  **/
  "THREE.CubeGeometry": {
    "prefix": "THREE.CubeGeometry",
    "body": "THREE.CubeGeometry( ${1:width}, ${2:height}, ${3:depth}, ${4:segmentsWidth}, ${5:segmentsHeight}, ${6:segmentsDepth}, ${7:materials}, ${8:sides} );$0"
  },
  "THREE.CylinderGeometry": {
    "prefix": "THREE.CylinderGeometry",
    "body": "THREE.CylinderGeometry( ${1:radiusTop}, ${2:radiusBottom}, ${3:height}, ${4:segmentsRadius}, ${5:segmentsHeight}, ${6:openEnded} );$0"
  },
  "THREE.ExtrudeGeometry": {
    "prefix": "THREE.ExtrudeGeometry",
    "body": "THREE.ExtrudeGeometry( ${1:shapes}, ${2:options} );$0"
  },
  "THREE.IcosahedronGeometry": {
    "prefix": "THREE.IcosahedronGeometry",
    "body": "THREE.IcosahedronGeometry( ${1:radius}, ${2:detail} );$0"
  },
  "THREE.LatheGeometry": {
    "prefix": "THREE.LatheGeometry",
    "body": "THREE.LatheGeometry( points, steps, angle );$0"
  },
  "THREE.OctahedronGeometry": {
    "prefix": "THREE.OctahedronGeometry",
    "body": "THREE.OctahedronGeometry( radius, detail );$0"
  },
  "THREE.PlaneGeometry": {
    "prefix": "THREE.PlaneGeometry",
    "body": "THREE.PlaneGeometry( width, depth, segmentsWidth, segmentsDepth );$0"
  },
  "THREE.PolyhedronGeometry": {
    "prefix": "THREE.PolyhedronGeometry",
    "body": "THREE.PolyhedronGeometry( vertices, faces, radius, detail );$0"
  },
  "THREE.SphereGeometry": {
    "prefix": "THREE.SphereGeometry",
    "body": "THREE.SphereGeometry( radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength );$0"
  },
  "THREE.TetrahedronGeometry": {
    "prefix": "THREE.TetrahedronGeometry",
    "body": "THREE.TetrahedronGeometry( radius, detail );$0"
  },
  "THREE.TextGeometry": {
    "prefix": "THREE.TextGeometry",
    "body": "THREE.TextGeometry( text, parameters );$0"
  },
  "THREE.TorusGeometry": {
    "prefix": "THREE.TorusGeometry",
    "body": "THREE.TorusGeometry( radius, tube, segmentsR, segmentsT, arc );$0"
  },
  "THREE.TorusKnotGeometry": {
    "prefix": "THREE.TorusKnotGeometry",
    "body": "THREE.TorusKnotGeometry( radius, tube, segmentsR, segmentsT, p, q, heightScale );$0"
  },
  /**
  *
  * Helpers
  *
  **/
  "THREE.AxisHelper": {
    "prefix": "THREE.AxisHelper",
    "body": "THREE.AxisHelper();$0"
  },
  "THREE.CameraHelper": {
    "prefix": "THREE.CameraHelper",
    "body": "THREE.CameraHelper();$0"
  },
  "THREE.SubdivisionModifier": {
    "prefix": "THREE.SubdivisionModifier",
    "body": "THREE.SubdivisionModifier( subdivisions );$0"
  },
  "THREE.LensFlare": {
    "prefix": "THREE.LensFlare",
    "body": "THREE.LensFlare( texture, size, distance, blending, color );$0"
  },
  "THREE.LensFlarePlugin": {
    "prefix": "THREE.LensFlarePlugin",
    "body": "THREE.LensFlarePlugin();$0"
  },
  "THREE.ShadowMapPlugin": {
    "prefix": "THREE.ShadowMapPlugin",
    "body": "THREE.ShadowMapPlugin();$0"
  },
  "THREE.SpritePlugin": {
    "prefix": "THREE.SpritePlugin",
    "body": "THREE.SpritePlugin();$0"
  },
  "THREE.ShaderFlares": {
    "prefix": "THREE.ShaderFlares",
    "body": "THREE.ShaderFlares;$0"
  },
  "THREE.ShaderSprite": {
    "prefix": "THREE.ShaderSprite",
    "body": "THREE.ShaderSprite;$0"
  },
  /**
   *
   * Audio
   */
"Audio" : {
 "prefix" : "THREE.Audio",
 "body" : "THREE.Audio(${1:listener});$0",
 "description" : "Creates a global audio source"
},
"Audio Listener" : {
  "prefix" : "THREE.AudioListener",
  "body" : "THREE.AudioListener();$0",
  "description" : "Creates a global audio object"
 },
 "Audio Loader" : {
  "prefix" : "THREE.AudioLoader",
  "body" : "THREE.AudioLoader();$0",
  "description" : "Loads a sound and sets it as the Audio object's buffer"
 },
 "Audio Analyser" : {
  "prefix" : "THREE.AudioAnalyser",
  "body" : "THREE.AudioAnalyser( ${1:sound}, ${2:fftSize});$0",
  "description" : "Create an audioAnalyser"
 },
 "Positional Audio" : {
  "prefix" : "THREE.PositionalAudio",
  "body" : "THREE.PositionalAudio( ${1:listener});$0",
  "description" : "Loads a sound and sets it as the Audio object's buffer"
 },
   /**
   *
   * Animation/Tracks
   */
   /**
   *
   * Blending Equations
   */
   /**
  *
  * Scene Utilities
  *
  **/
  /**
  *
  * Shape Utilities
  *
  **/
 /**
  *
  * Shadows
  *
  **/ 
/**
  *
  * Loaders
  *
  **/
/**
  *
  * Loading Managers
  *
  **/
  /**
  *
  * Interpolants
  *
  **/
  /**
  *
  * Loader Examples
  *
  **/
  /**
  *
  * Plugins
  *
  **/
  /**
  *
  * QuickHull
  *
  **/
  
}
